// -*-c++-*-
//
// The MIT License (MIT)
// 
// Copyright (c) 2006 Jeffrey A. Fike
// Copyright (C) 2015 Michael Tesch tesch1 a gmail com
// 
// Permission is hereby granted, free of charge, to any person obtaining a copy
//  of this software and associated documentation files (the "Software"), to deal
//  in the Software without restriction, including without limitation the rights
//  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
//  copies of the Software, and to permit persons to whom the Software is
//  furnished to do so, subject to the following conditions:
// 
// The above copyright notice and this permission notice shall be included in
//  all copies or substantial portions of the Software.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
//  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
//  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
//  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
//  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
//  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
//  THE SOFTWARE.
//
// Version 0.0.0
//
// Thanks to Jeff Fike for publishing the dual original code upon which this
// file is based.
//
// The cxxdual package is available on github, bug reports and feature
// submissions welcome!
//
//  https://github.com/tesch1/cxxduals
//
#ifndef LIB_CXXDUALX
#define LIB_CXXDUALS 1

#include <cmath>
#include <sstream>
#include <complex>
#include <limits>
#include <type_traits>
#include <initializer_list>

// check if constexpr exists
#if __cplusplus >= 201103L
#define CXXDUALS_CONSTEXPR constexpr
#else
#define CXXDUALS_CONSTEXPR const
#endif

/* dual-numbers implementation for calculation of differentials */

namespace cxxduals {

// forward declaration
template <typename _Tp> class dual;

// useful typedefs
#ifndef CXXDUALS_NO_TYPEDEFS
typedef dual<float> dualf;
typedef dual<double> duald;
typedef dual<long double> dualld;
typedef dual<std::complex<float> > dualcf;
typedef dual<std::complex<double> > dualcd;
typedef dual<std::complex<long double> > dualcld;
#if __cplusplus >= 201103L
template <class _Tp> using hyperdual = dual<dual<_Tp> >;
typedef hyperdual<float> hyperdualf;
typedef hyperdual<double> hyperduald;
typedef hyperdual<long double> hyperdualld;
typedef hyperdual<std::complex<float> > hyperdualcf;
typedef hyperdual<std::complex<double> > hyperdualcd;
typedef hyperdual<std::complex<long double> > hyperdualcld;
#endif

#ifndef CXXDUALS_NO_LIMITS
} // cxxduals

// this is allowed by C++03 17.4.3.1/1, and C++11 18.3.2.3/1
namespace std {
template<typename _Tp>
struct numeric_limits<cxxduals::dual<_Tp> > : public numeric_limits<_Tp> {
  typedef cxxduals::dual<_Tp> T;
  static CXXDUALS_CONSTEXPR bool is_specialized = true;
  static CXXDUALS_CONSTEXPR T min()     { return T(numeric_limits<_Tp>::min()); }
  static CXXDUALS_CONSTEXPR T max()     { return T(numeric_limits<_Tp>::max()); }
  static CXXDUALS_CONSTEXPR T epsilon() { return T(numeric_limits<_Tp>::epsilon()); }
  static CXXDUALS_CONSTEXPR T round_error() { return T(numeric_limits<_Tp>::round_error()); }
  static CXXDUALS_CONSTEXPR T infinity()    { return T(numeric_limits<_Tp>::infinity()); }
  static CXXDUALS_CONSTEXPR T quiet_NaN()   { return T(numeric_limits<_Tp>::quiet_NaN()); }
  static CXXDUALS_CONSTEXPR T signaling_NaN() { return T(numeric_limits<_Tp>::signaling_NaN()); }
  static CXXDUALS_CONSTEXPR T denorm_min()  { return T(numeric_limits<_Tp>::denorm_min()); }
};
// TODO: cv-specializations (C++11 18.3.2.3/2)
} // std
namespace cxxduals {
#endif // CXXDUALS_NO_LIMITS
#endif // CXXDUALS_NO_TYPEDEFS

// useful type extraction
template <typename _Tp>
struct dual_traits_basic {
  typedef _Tp scalar_type;
  typedef _Tp value_type;
  static const int depth = 0;
  static const int num_elem = 1;
  typedef std::false_type is_nested;
  typedef std::false_type is_dual;
};
template <typename _Tp> struct dual_trait_helper;
template <> struct dual_trait_helper<float> : public dual_traits_basic<float> {
  typedef float scalar_type;
};
template <> struct dual_trait_helper<double> : public dual_traits_basic<double> {
  typedef double scalar_type;
};
template <> struct dual_trait_helper<long double> : public dual_traits_basic<long double> {
  typedef long double scalar_type;
};
template <typename _Tp>
struct dual_trait_helper<std::complex<_Tp> > : public dual_traits_basic<_Tp> {
  typedef std::complex<_Tp> value_type;
};
template <typename _Tp>
struct dual_trait_helper<dual<_Tp> > : public dual_traits_basic<typename dual<_Tp>::scalar_type> {
  typedef typename dual_trait_helper<_Tp>::scalar_type scalar_type;
  typedef typename dual_trait_helper<_Tp>::value_type value_type;
  static const int depth = dual_trait_helper<_Tp>::depth + 1;
  static const int num_elem = dual_trait_helper<_Tp>::num_elem * 2;
  typedef std::true_type is_dual;
  typedef typename dual_trait_helper<_Tp>::is_dual is_nested;
};

/// dual number class
template <typename _Tp>
class dual {

private:
  _Tp _f0, _f1;

public:

  typedef _Tp value_type;
  typedef typename dual_trait_helper<_Tp>::value_type basic_value_type;
  typedef typename dual_trait_helper<_Tp>::scalar_type scalar_type;
  static const int depth = dual_trait_helper<dual<_Tp> >::depth;
  static const int num_elem = dual_trait_helper<dual<_Tp> >::num_elem;

  /// Constructors
  CXXDUALS_CONSTEXPR dual()
    : _f0(), _f1() { }

  template <typename _Up>
  CXXDUALS_CONSTEXPR dual(const _Up & f0)
    : _f0(f0), _f1() { }

  template <typename _Up, typename _Vp>
  CXXDUALS_CONSTEXPR dual(const _Up & f0, const _Vp & f1)
    : _f0(f0), _f1(f1) { }

#if __cplusplus >= 201103L
  dual(std::initializer_list<basic_value_type> ll)
    : _f0(), _f1()
  {
    if (ll.size() > num_elem)
      throw std::exception();
    int ii = 0;
    for (auto it = ll.begin(); it != ll.end(); it++, ii++)
      part(ii) = *it;
  }
#endif

  template<typename _Up>
  explicit CXXDUALS_CONSTEXPR dual(const dual<_Up> & rhs)
    : _f0(rhs.rpart()), _f1(rhs.epart()) { }

  /// Part extraction
#if __cplusplus >= 201103L
  constexpr _Tp 
  rpart() const { return _f0; }

  constexpr _Tp 
  epart() const { return _f1; }

private:
  constexpr basic_value_type
  private_part(int p, std::false_type) const {
    // p had better be either 0 or 1
    return p == 0 ? _f0 : _f1;
  }
  constexpr basic_value_type
  private_part(int p, std::true_type) const {
    return p < (num_elem / 2)
               ? _f0.part(p)
               : _f1.part(p - (dual_trait_helper<dual<_Tp> >::num_elem / 2));
  }
public:
  constexpr basic_value_type
  part(int p) const {
    return private_part(p, typename dual_trait_helper<_Tp>::is_dual());
  }
#else
  inline const _Tp &
  rpart() const { return _f0; }

  inline const _Tp &
  epart() const { return _f1; }
#endif

  inline _Tp &
  rpart() { return _f0; }

  inline _Tp &
  epart() { return _f1; }

private:
  inline basic_value_type &
  private_part(int p, std::false_type) {
    return p == 0 ? _f0 : _f1;
  }
  inline basic_value_type &
  private_part(int p, std::true_type) {
    return p < (num_elem / 2)
               ? _f0.part(p)
               : _f1.part(p - (dual_trait_helper<dual<_Tp> >::num_elem / 2));
  }
public:
  inline basic_value_type &
  part(int p) {
    return private_part(p, typename dual_trait_helper<_Tp>::is_dual());
  }

  /// Part assignment
  inline void
  rpart(_Tp f0) { _f0 = f0; }

  inline void
  epart(_Tp f1) { _f1 = f1; }

private:
  inline void
  private_part(int p, const basic_value_type & v, std::false_type) {
    if (p == 0)
      _f0 = v;
    else
      _f1 = v;
  }
  inline void
  private_part(int p, const basic_value_type & v, std::true_type) {
    if (p < (num_elem / 2))
      _f0.part(p, v);
    else
      _f1.part(p - (dual_trait_helper<dual<_Tp> >::num_elem / 2), v);
  }
public:
  inline void
  part(int p, const basic_value_type & v) {
    private_part(p, v, typename dual_trait_helper<_Tp>::is_dual());
  }

  /// Assignment
#if 0
  inline dual<_Tp> &
  operator=(const _Tp & rhs) { _f0 = rhs; _f1 = _Tp(); return *this; }
#endif
  inline dual<_Tp> &
  operator=(const dual<_Tp> & rhs) { _f0 = rhs._f0; _f1 = rhs._f1; return *this; }

  template<typename _Up>
  inline dual<_Tp> &
  operator=(const dual<_Up> & rhs) { _f0 = rhs.rpart(); _f1 = rhs.epart(); return *this; }

  // Operations

  /// unitary
  dual<_Tp>
  operator+() const { return *this; }

  /// unitary negation
  dual<_Tp>
  operator-() const
  {
    return dual<_Tp>(-_f0, -_f1);
  }

  /// addition
  dual<_Tp> &
  operator+=(const _Tp & rhs)
  {
    _f0 += rhs;
    return *this;
  }

  template<typename _Up>
  dual<_Tp> &
  operator+=(const dual<_Up> & rhs)
  {
    _f0 += rhs.rpart();
    _f1 += rhs.epart();
    return *this;
  }

  /// subtraction
  dual<_Tp> &
  operator-=(const _Tp & rhs)
  {
    _f0 -= rhs;
    return *this;
  }

  template<typename _Up>
  dual<_Tp> &
  operator-=(const dual<_Up> & rhs)
  {
    _f0 -= rhs.rpart();
    _f1 -= rhs.epart();
    return *this;
  }

  /// multiplication
  dual<_Tp> &
  operator*=(const _Tp & rhs)
  {
    _f0 *= rhs;
    _f1 *= rhs;
    return *this;
  }

  template<typename _Up>
  dual<_Tp> &
  operator*=(const dual<_Up> & rhs)
  {
    _Tp tf0, tf1;
    _Tp rf0, rf1;
    tf0 = _f0;
    tf1 = _f1;
    rf0 = rhs.rpart();
    rf1 = rhs.epart();
    _f0 = tf0 * rf0;
    _f1 = tf0 * rf1 + tf1 * rf0;
    return *this;
  }

  /// division
  dual<_Tp> &
  operator/=(const _Tp & rhs)
  {
    _f0 /= rhs;
    _f1 /= rhs;
    return *this;
  }

  template<typename _Up>
  dual<_Tp> &
  operator/=(const dual<_Up> & rhs)
  {
#if __cplusplus > 199711L
    typedef decltype(_Tp(1) * _Up(1)) higher_t;
#else
    typedef _Tp higher_t;
#endif
#if 0
    higher_t deriv;
    deriv = higher_t(-1) * std::pow(higher_t(rhs.rpart()), higher_t(-2));
    dual<higher_t> inv;
    inv.rpart() = higher_t(1) / rhs.rpart();
    inv.epart() = rhs.epart() * deriv;
    *this *= inv;
#else
    dual<higher_t> tmp;
    tmp.rpart() = _f0 / rhs.rpart();
    tmp.epart() = (_f1 * rhs.rpart() - _f0 * rhs.epart()) / (rhs.rpart() * rhs.rpart());
    *this = tmp;
#endif
    return *this;
  }

};

/// Value extraction
//@{
template <typename _Tp>
inline _Tp
rpart(const dual<_Tp> & d)
{
  return d.rpart();
}

template <typename _Tp>
inline _Tp
rpart(const _Tp & d)
{
  return d;
}

template <typename _Tp>
inline _Tp
epart(const dual<_Tp> & d)
{
  return d.epart();
}
//@}

// basic ops
#if 0
#define DUALH_DEFINE_BASIC_OP_TEMPLATES(OP)                     \
  template <typename _Tp>                                       \
  inline dual<_Tp>                                              \
  operator OP (const dual<_Tp> & lhs, const dual<_Tp> & rhs)    \
  {                                                             \
    dual<_Tp> d = lhs;                                          \
    d OP##= rhs;                                                \
    return d;                                                   \
  }                                                             \
  /* down one */                                                \
  template <typename _Tp>                                       \
  inline dual<_Tp>                                              \
  operator OP(const dual<_Tp> & lhs, const _Tp & rhs)           \
  {                                                             \
    dual<_Tp> d = lhs;                                          \
    d OP##= rhs;                                                \
    return d;                                                   \
  }                                                             \
  template <typename _Tp>                                       \
  inline dual<_Tp>                                              \
  operator OP(const _Tp & lhs, const dual<_Tp> & rhs)           \
  {                                                             \
    dual<_Tp> d(lhs);                                           \
    d OP##= rhs;                                                \
    return d;                                                   \
  }                                                             \
  /* dual nesting */                                            \
  template <typename _Tp>                                       \
  inline dual<_Tp>                                              \
  operator OP(const dual<_Tp> & lhs, const typename _Tp::value_type & rhs) \
  {                                                             \
    dual<_Tp> d(lhs);                                           \
    d OP##= rhs;                                                \
    return d;                                                   \
  }                                                             \
  template <typename _Tp>                                       \
  inline dual<_Tp>                                              \
  operator OP(const typename _Tp::value_type & lhs, const dual<_Tp> & rhs) \
  {                                                             \
    dual<_Tp> d(lhs);                                           \
    d OP##= rhs;                                                \
    return d;                                                   \
  }
#else
/* the c++11 way - maybe when back porting to older c++ can get rid of result_type */
namespace internal {
// restrict op types to help template libs (ie Eigen) use dual<>
template <typename _Tp, typename _Up> struct presult_type {};
template <typename _Tp> struct presult_type<_Tp, int> {
  typedef dual<_Tp> dual_type;  // for operations that assign to a dual
  typedef bool comp_type;       // for operations that compare w a dual
  typedef int res_type;         // for operations that take a value from a dual
};
template <typename _Tp> struct presult_type<_Tp, unsigned> {
  typedef dual<_Tp> dual_type;
  typedef bool comp_type;
  typedef unsigned res_type;
};
template <typename _Tp> struct presult_type<_Tp, float> {
  typedef dual<_Tp> dual_type;
  typedef bool comp_type;
  typedef float res_type;
};
template <typename _Tp> struct presult_type<_Tp, double> {
  typedef dual<_Tp> dual_type;
  typedef bool comp_type;
  typedef double res_type;
};
template <typename _Tp> struct presult_type<_Tp, long double> {
  typedef dual<_Tp> dual_type;
  typedef bool comp_type;
  typedef long double res_type;
};
template <typename _Tp, typename _Up> struct presult_type<_Tp, std::complex<_Up> > {
  typedef dual<_Tp> dual_type;
  typedef bool comp_type;
  typedef std::complex<_Up> res_type;
};
template <typename _Tp, typename _Up> using result_type = presult_type<_Tp, _Up>;
}
#define DUALH_DEFINE_BASIC_OP_TEMPLATES(OP)                     \
  template <typename _Tp>                                       \
  inline dual<_Tp>                                              \
  operator OP (const dual<_Tp> & lhs, const dual<_Tp> & rhs)    \
  {                                                             \
    dual<_Tp> d = lhs;                                          \
    d OP##= rhs;                                                \
    return d;                                                   \
  }                                                             \
  /* down one */                                                \
  template <typename _Tp, typename _Up>                         \
  inline typename internal::result_type<_Tp,_Up>::dual_type     \
  operator OP(const dual<_Tp> & lhs, const _Up & rhs)           \
  {                                                             \
    dual<_Tp> d = lhs;                                          \
    d OP##= rhs;                                                \
    return d;                                                   \
  }                                                             \
  template <typename _Tp, typename _Up>                         \
  inline typename internal::result_type<_Tp,_Up>::dual_type     \
  operator OP(const _Up & lhs, const dual<_Tp> & rhs)           \
  {                                                             \
    dual<_Tp> d(lhs);                                           \
    d OP##= rhs;                                                \
    return d;                                                   \
  }
#endif

//@{
///  Addition
DUALH_DEFINE_BASIC_OP_TEMPLATES(+)
//@}

//@{
///  Subtraction
DUALH_DEFINE_BASIC_OP_TEMPLATES(-)
//@}

//@{
///  Multiplication
DUALH_DEFINE_BASIC_OP_TEMPLATES(*)
//@}

//@{
///  Division
DUALH_DEFINE_BASIC_OP_TEMPLATES(/)
//@}

#undef DUALH_DEFINE_BASIC_OP_TEMPLATES

///
#if 0
// fix emacs auto formatting below this point for me
  ;
#endif

// for += -= *= /= on non-dual numbers, only on certain types!
#define DUALH_DEFINE_NONDUAL_OP_TEMPLATE(OP)                    \
  template <typename _Tp, typename _Up>                         \
  inline typename internal::result_type<_Tp,_Up>::res_type      \
  operator OP (_Up & lhs, const dual<_Tp> & rhs)                \
  {                                                             \
    lhs += rhs.rpart();                                         \
    return lhs;                                                 \
  }

DUALH_DEFINE_NONDUAL_OP_TEMPLATE(+=)
DUALH_DEFINE_NONDUAL_OP_TEMPLATE(-=)
DUALH_DEFINE_NONDUAL_OP_TEMPLATE(*=)
DUALH_DEFINE_NONDUAL_OP_TEMPLATE(/=)

#undef DUALH_DEFINE_NONDUAL_OP_TEMPLATE

///
#if 0
// fix emacs auto formatting below this point for me
  ;
#endif

template <typename _Tp, typename _Up>
dual<_Tp>
pow(const dual<_Tp> & xx, const _Up & aa)
{
  using std::pow;
  using std::abs;
  using std::exp;
  dual<_Tp> temp;
#if 0
  _Tp deriv, xval, tol;
  xval = xx.rpart();
  // TODO- should use numeric traits of _Tp instead of 1e-15
  tol = _Tp(1e-15);
  if (abs(xval) > 0 && abs(xval) < abs(tol)) {
    xval = xx.rpart() / (abs(xx.rpart()) / tol);
    //if (xval >= 0)
    //  xval = tol;
    //if (xval < 0)
    //  xval = -tol;
  }
  deriv = aa * pow(xval, (aa - _Tp(1.0)));
  temp.rpart() = pow(xx.rpart(), aa);  //Use actual x value, only use tol for derivs
  temp.epart() = xx.epart() * deriv;
#else
  //return exp(xx * dual<_Tp>(log(aa)));
  temp.rpart() = pow(xx.rpart(), aa);
  temp.epart() = xx.epart() * aa * pow(xx.rpart(), aa - _Up(1));
#endif
  return temp;
}
#if 1
template <typename _Tp>
dual<_Tp>
pow(const _Tp & aa, const dual<_Tp> & xx)
{
  using std::pow;
  using std::log;
  using std::exp;
#if 0
  return exp(xx * log(aa));
#else
  dual<_Tp> temp;
  temp.rpart() = pow(aa, xx.rpart());
  temp.epart() = xx.epart() * pow(aa, xx.rpart()) * log(aa);
  return temp;
#endif
}

template <typename _Tp>
dual<_Tp>
pow(const dual<_Tp> & xx, const dual<_Tp> & yy)
{
  using std::log;
  using std::exp;
  return exp(yy * log(xx));
}
#endif
//template <typename _Tp> dual<_Tp> pow(dual<_Tp> x, dual<_Tp> a) {
//
//}

template <typename _Tp>
dual<_Tp>
exp(const dual<_Tp> & x)
{
  using std::exp;
  _Tp deriv;
  deriv = exp(x.rpart());
  return dual<_Tp>(deriv, deriv * x.epart());
}

template <typename _Tp>
dual<_Tp>
log(dual<_Tp> x)
{
  using std::log;
  _Tp deriv1;
  deriv1 = x.epart() / x.rpart();
  return dual<_Tp>(log(x.rpart()), deriv1);
}

template <typename _Tp>
inline dual<_Tp>
sin(dual<_Tp> x)
{
  using std::sin;
  using std::cos;
  dual<_Tp> temp;
  _Tp funval, deriv;
  funval = sin(x.rpart());
  deriv = cos(x.rpart());
  temp.rpart() = funval;
  temp.epart() = deriv * x.epart();
  return temp;
}

template <typename _Tp>
inline dual<_Tp>
cos(dual<_Tp> x)
{
  using std::sin;
  using std::cos;
  dual<_Tp> temp;
  _Tp funval, deriv;
  funval = cos(x.rpart());
  deriv = -sin(x.rpart());
  temp.rpart() = funval;
  temp.epart() = deriv * x.epart();
  return temp;
}

template <typename _Tp>
inline dual<_Tp>
tan(dual<_Tp> x)
{
  dual<_Tp> temp;
  _Tp funval, deriv;
  funval = tan(x.rpart());
  deriv  = funval*funval + 1.0;
  temp.rpart() = funval;
  temp.epart() = deriv*x.epart();
  return temp;
}

template <typename _Tp>
dual<_Tp>
asin(dual<_Tp> x)
{
  using std::asin;
  using std::sqrt;
  dual<_Tp> temp;
  _Tp funval, deriv1, deriv;
  funval = asin(x.rpart());
  deriv1 = 1.0-x.rpart()*x.rpart();
  deriv = 1.0/sqrt(deriv1);
  temp.rpart() = funval;
  temp.epart() = deriv*x.epart();
  return temp;
}

#if 0
template <typename _Tp>
dual<_Tp>
acos(dual<_Tp> x)
{
  using std::acos;
  using std::sqrt;
  dual<_Tp> temp;
  _Tp funval, deriv1, deriv;
  funval = acos(x.rpart());
  deriv1 = 1.0 - x.rpart() * x.rpart();
  deriv = 1.0 / sqrt(deriv1);
  temp.rpart() = funval;
  temp.epart() = deriv*x.epart();
  return temp;
}
#endif

template <typename _Tp>
dual<_Tp>
atan(dual<_Tp> x)
{
  using std::atan;
  dual<_Tp> temp;
  _Tp funval, deriv1, deriv;
  funval = atan(x.rpart());
  deriv1 = 1.0 + x.rpart() * x.rpart();
  deriv = 1.0 / deriv1;
  temp.rpart() = funval;
  temp.epart() = deriv * x.epart();
  return temp;
}

template <typename _Tp>
dual<_Tp>
atan2(dual<_Tp> y, dual<_Tp> x)
{
  using std::atan2;
  dual<_Tp> temp;
  _Tp funval, deriv1, deriv;
  funval = atan2(y.rpart(), x.rpart());
  // unsure from here on...
  deriv1 = 1.0 + x.rpart() * x.rpart();
  deriv = 1.0 / deriv1;
  temp.rpart() = funval;
  temp.epart() = deriv * x.epart();
  return temp;
}

template <typename _Tp>
dual<_Tp>
sqrt(dual<_Tp> x)
{
  using std::pow;
  return pow(x, _Tp(0.5));
}

template <typename _Tp>
dual<_Tp>
max(dual<_Tp> x1, dual<_Tp> x2)
{
  return x1.rpart() >= x2.rpart() ? x1 : x2;
}

template <typename _Tp>
dual<_Tp>
max(dual<_Tp> x1, _Tp x2)
{
  return x1.rpart() >= x2 ? x1 : dual<_Tp>(x2);
}

template <typename _Tp>
dual<_Tp>
max(_Tp x1, dual<_Tp> x2)
{
  return x1 >= x2.rpart() ? dual<_Tp>(x1) : x2;
}

template <typename _Tp>
dual<_Tp>
min(dual<_Tp> x1, dual<_Tp> x2)
{
  return x1.rpart() <= x2.rpart() ? x1 : x2;
}

template <typename _Tp>
dual<_Tp>
min(dual<_Tp> x1, _Tp x2)
{
  return x1.rpart() <= x2 ? x1 : dual<_Tp>(x2);
}

template <typename _Tp>
dual<_Tp>
min(_Tp x1, dual<_Tp> x2)
{
  return x1 <= x2.rpart() ? dual<_Tp>(x1) : x2;
}

#if 0
template <typename _Tp>
dual<_Tp>
conj(const dual<_Tp> & x)
{
  // todo - dont just make things up
  using std::conj;
  return dual<_Tp>(conj(x.rpart()),
                   conj(x.epart()));
}
#endif

template <typename _Tp>
dual<_Tp>
real(const dual<_Tp> & x)
{
  // todo - dont just make things up
  return dual<_Tp>(real(x.rpart()),
                   real(x.epart()));
}

template <typename _Tp>
dual<_Tp>
imag(const dual<_Tp> & x)
{
  // todo - dont just make things up
  return dual<_Tp>(imag(x.rpart()), imag(x.epart()));
}

template <typename _Tp>
inline dual<_Tp>
abs(const dual<_Tp> & x)
{
  using std::abs;
  // wrong for complex
  return abs(x.rpart()) == x.rpart() ? x : -x;
}

template <typename _Tp>
dual<_Tp>
abs2(const dual<_Tp> & x)
{
  return x * x;
}

template <typename _Tp>
dual<_Tp>
ceil(const dual<_Tp> & x)
{
  using std::ceil;
  _Tp c = ceil(x.rpart());
  return dual<_Tp>(c,
                   c == x.rpart()
                   ? std::numeric_limits<_Tp>::infinity()
                   : _Tp(0));
}

template <typename _Tp>
dual<_Tp>
floor(const dual<_Tp> & x)
{
  _Tp f = floor(x.rpart());
  return dual<_Tp>(f,
                   f == x.rpart()
                   ? std::numeric_limits<_Tp>::infinity()
                   : _Tp(0));
}

/// comparison
#define DUALH_COMPARISON_OP(OP)                                 \
  template <typename _Tp, typename _Up>                         \
  inline bool                                                   \
  operator OP (const dual<_Tp> & lhs, const dual<_Up> & rhs)    \
  {                                                             \
    return lhs.rpart() OP rhs.rpart();                          \
  }                                                             \
  template <typename _Tp, typename _Up>                         \
  inline typename internal::result_type<_Tp,_Up>::comp_type     \
  operator OP (const dual<_Tp> & lhs, const _Up & rhs)          \
  {                                                             \
    return lhs.rpart() OP rhs;                                  \
  }                                                             \
  template <typename _Tp, typename _Up>                         \
  inline typename internal::result_type<_Tp,_Up>::comp_type     \
  operator OP (const _Up & lhs, const dual<_Tp> & rhs)          \
  {                                                             \
    return lhs OP rhs.rpart();                                  \
  }

DUALH_COMPARISON_OP(>)
DUALH_COMPARISON_OP(<)
DUALH_COMPARISON_OP(==)
DUALH_COMPARISON_OP(>=)
DUALH_COMPARISON_OP(<=)
DUALH_COMPARISON_OP(!=)

#undef DUALH_COMPARISON_OP
#if 0
// fix emacs auto formatting below this point for me
  ;
#endif

#if 0
// TODO: group parts by e-index better
#else
template<typename _Tp, typename _CharT, class _Traits>
std::basic_ostream<_CharT, _Traits>&
operator<<(std::basic_ostream<_CharT, _Traits>& os, const dual<_Tp>& rhs)
{
  std::basic_ostringstream<_CharT, _Traits> s;
  s.flags(os.flags());
  s.imbue(os.getloc());
  s.precision(os.precision());
  s << "(" << rhs.rpart()
    << " + e" << dual_trait_helper<dual<_Tp> >::depth << "*" << rhs.epart()
    << ")";
  return os << s.str();
}
#endif

} // namespace cxxduals

#endif // LIB_CXXDUALS
